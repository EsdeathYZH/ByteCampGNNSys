/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GraphServices_H
#define GraphServices_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "ByteGraph_types.h"

namespace ByteGraph {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GraphServicesIf {
 public:
  virtual ~GraphServicesIf() {}
  virtual void sayHello(std::string& _return, const int32_t workerId, const std::string& content) = 0;
};

class GraphServicesIfFactory {
 public:
  typedef GraphServicesIf Handler;

  virtual ~GraphServicesIfFactory() {}

  virtual GraphServicesIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GraphServicesIf* /* handler */) = 0;
};

class GraphServicesIfSingletonFactory : virtual public GraphServicesIfFactory {
 public:
  GraphServicesIfSingletonFactory(const ::std::shared_ptr<GraphServicesIf>& iface) : iface_(iface) {}
  virtual ~GraphServicesIfSingletonFactory() {}

  virtual GraphServicesIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GraphServicesIf* /* handler */) {}

 protected:
  ::std::shared_ptr<GraphServicesIf> iface_;
};

class GraphServicesNull : virtual public GraphServicesIf {
 public:
  virtual ~GraphServicesNull() {}
  void sayHello(std::string& /* _return */, const int32_t /* workerId */, const std::string& /* content */) {
    return;
  }
};

typedef struct _GraphServices_sayHello_args__isset {
  _GraphServices_sayHello_args__isset() : workerId(false), content(false) {}
  bool workerId :1;
  bool content :1;
} _GraphServices_sayHello_args__isset;

class GraphServices_sayHello_args {
 public:

  GraphServices_sayHello_args(const GraphServices_sayHello_args&);
  GraphServices_sayHello_args& operator=(const GraphServices_sayHello_args&);
  GraphServices_sayHello_args() : workerId(0), content() {
  }

  virtual ~GraphServices_sayHello_args() noexcept;
  int32_t workerId;
  std::string content;

  _GraphServices_sayHello_args__isset __isset;

  void __set_workerId(const int32_t val);

  void __set_content(const std::string& val);

  bool operator == (const GraphServices_sayHello_args & rhs) const
  {
    if (!(workerId == rhs.workerId))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const GraphServices_sayHello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphServices_sayHello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphServices_sayHello_pargs {
 public:


  virtual ~GraphServices_sayHello_pargs() noexcept;
  const int32_t* workerId;
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphServices_sayHello_result__isset {
  _GraphServices_sayHello_result__isset() : success(false) {}
  bool success :1;
} _GraphServices_sayHello_result__isset;

class GraphServices_sayHello_result {
 public:

  GraphServices_sayHello_result(const GraphServices_sayHello_result&);
  GraphServices_sayHello_result& operator=(const GraphServices_sayHello_result&);
  GraphServices_sayHello_result() : success() {
  }

  virtual ~GraphServices_sayHello_result() noexcept;
  std::string success;

  _GraphServices_sayHello_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GraphServices_sayHello_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphServices_sayHello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphServices_sayHello_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphServices_sayHello_presult__isset {
  _GraphServices_sayHello_presult__isset() : success(false) {}
  bool success :1;
} _GraphServices_sayHello_presult__isset;

class GraphServices_sayHello_presult {
 public:


  virtual ~GraphServices_sayHello_presult() noexcept;
  std::string* success;

  _GraphServices_sayHello_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GraphServicesClient : virtual public GraphServicesIf {
 public:
  GraphServicesClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GraphServicesClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHello(std::string& _return, const int32_t workerId, const std::string& content);
  void send_sayHello(const int32_t workerId, const std::string& content);
  void recv_sayHello(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GraphServicesProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<GraphServicesIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GraphServicesProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sayHello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GraphServicesProcessor(::std::shared_ptr<GraphServicesIf> iface) :
    iface_(iface) {
    processMap_["sayHello"] = &GraphServicesProcessor::process_sayHello;
  }

  virtual ~GraphServicesProcessor() {}
};

class GraphServicesProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GraphServicesProcessorFactory(const ::std::shared_ptr< GraphServicesIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< GraphServicesIfFactory > handlerFactory_;
};

class GraphServicesMultiface : virtual public GraphServicesIf {
 public:
  GraphServicesMultiface(std::vector<std::shared_ptr<GraphServicesIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GraphServicesMultiface() {}
 protected:
  std::vector<std::shared_ptr<GraphServicesIf> > ifaces_;
  GraphServicesMultiface() {}
  void add(::std::shared_ptr<GraphServicesIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sayHello(std::string& _return, const int32_t workerId, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sayHello(_return, workerId, content);
    }
    ifaces_[i]->sayHello(_return, workerId, content);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GraphServicesConcurrentClient : virtual public GraphServicesIf {
 public:
  GraphServicesConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  GraphServicesConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHello(std::string& _return, const int32_t workerId, const std::string& content);
  int32_t send_sayHello(const int32_t workerId, const std::string& content);
  void recv_sayHello(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
